// src/owner/PaymentInfo.js
import React, { useState, useEffect } from 'react';

const PaymentInfo = () => {
  const [revenueSummary, setRevenueSummary] = useState({
    totalRevenue: 2500000, // Tsh
    totalPayouts: 2000000, // Tsh
    balance: 500000, // Tsh
    pendingPayouts: 0
  });

  const [transactions, setTransactions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchPaymentData();
  }, []);

  const fetchPaymentData = async () => {
    setLoading(true);
    setError(null);
    try {
      // Simulate API call for payment data
      await new Promise(resolve => setTimeout(resolve, 1200));

      const simulatedTransactions = [
        { id: 'TRN001', date: '2025-05-28', description: 'May bookings payout', amount: 500000, type: 'Payout', status: 'Completed' },
        { id: 'TRN002', date: '2025-05-20', description: 'Stall booking #1234', amount: 15000, type: 'Income', status: 'Completed' },
        { id: 'TRN003', date: '2025-05-15', description: 'April bookings payout', amount: 750000, type: 'Payout', status: 'Completed' },
        { id: 'TRN004', date: '2025-05-10', description: 'Stall booking #1235', amount: 20000, type: 'Income', status: 'Completed' },
        { id: 'TRN005', date: '2025-05-05', description: 'Stall booking #1236', amount: 10000, type: 'Income', status: 'Completed' },
        { id: 'TRN006', date: '2025-04-30', description: 'March bookings payout', amount: 750000, type: 'Payout', status: 'Completed' },
      ];

      setTransactions(simulatedTransactions);
      // Recalculate summary based on transactions if needed, or assume backend provides it.
      // For this example, we'll keep the predefined summary for simplicity.

    } catch (err) {
      setError("Failed to fetch payment information. Please try again.");
      console.error("Payment info fetch error:", err);
    } finally {
      setLoading(false);
    }
  };

  const formatTsh = (amount) => {
    return `Tsh ${amount.toLocaleString('en-TZ')}`;
  };

  return (
    <div className="container-fluid mt-4">
      <div className="card shadow-lg p-4 bg-white">
        <h3 className="mb-4 text-primary"><i className="bi bi-wallet-fill me-2"></i>Payment Information</h3>
        <p className="mb-4 text-muted">View your market's financial overview and transaction history.</p>

        {loading && (
          <div className="d-flex justify-content-center my-5 py-5">
            <div className="spinner-border text-primary" role="status" style={{ width: '3rem', height: '3rem' }}>
              <span className="visually-hidden">Loading Payment Info...</span>
            </div>
            <p className="ms-3 lead text-muted">Loading Payment Info...</p>
          </div>
        )}

        {error && (
          <div className="alert alert-danger my-4" role="alert">
            {error}
          </div>
        )}

        {!loading && !error && (
          <>
            {/* Revenue Summary Cards */}
            <div className="row g-4 mb-5">
              <div className="col-md-6 col-lg-3">
                <div className="card text-center bg-success text-white shadow-sm h-100">
                  <div className="card-body">
                    <i className="bi bi-graph-up-arrow fs-1 mb-2"></i>
                    <h5 className="card-title">Total Revenue</h5>
                    <p className="card-text fs-3 fw-bold">{formatTsh(revenueSummary.totalRevenue)}</p>
                  </div>
                </div>
              </div>
              <div className="col-md-6 col-lg-3">
                <div className="card text-center bg-primary text-white shadow-sm h-100">
                  <div className="card-body">
                    <i className="bi bi-cash-stack fs-1 mb-2"></i>
                    <h5 className="card-title">Total Payouts</h5>
                    <p className="card-text fs-3 fw-bold">{formatTsh(revenueSummary.totalPayouts)}</p>
                  </div>
                </div>
              </div>
              <div className="col-md-6 col-lg-3">
                <div className="card text-center bg-info text-white shadow-sm h-100">
                  <div className="card-body">
                    <i className="bi bi-wallet2 fs-1 mb-2"></i>
                    <h5 className="card-title">Current Balance</h5>
                    <p className="card-text fs-3 fw-bold">{formatTsh(revenueSummary.balance)}</p>
                  </div>
                </div>
              </div>
              <div className="col-md-6 col-lg-3">
                <div className="card text-center bg-warning text-dark shadow-sm h-100">
                  <div className="card-body">
                    <i className="bi bi-hourglass fs-1 mb-2"></i>
                    <h5 className="card-title">Pending Payouts</h5>
                    <p className="card-text fs-3 fw-bold">{formatTsh(revenueSummary.pendingPayouts)}</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Recent Transactions Table */}
            <h4 className="mb-3 text-secondary"><i className="bi bi-list-check me-2"></i>Recent Transactions</h4>
            {transactions.length > 0 ? (
              <div className="table-responsive">
                <table className="table table-hover table-striped shadow-sm">
                  <thead className="table-primary">
                    <tr>
                      <th scope="col">Transaction ID</th>
                      <th scope="col">Date</th>
                      <th scope="col">Description</th>
                      <th scope="col">Amount</th>
                      <th scope="col">Type</th>
                      <th scope="col">Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {transactions.map(transaction => (
                      <tr key={transaction.id}>
                        <td>{transaction.id}</td>
                        <td>{transaction.date}</td>
                        <td>{transaction.description}</td>
                        <td className={transaction.type === 'Income' ? 'text-success fw-bold' : 'text-danger fw-bold'}>
                          {formatTsh(transaction.amount)}
                        </td>
                        <td>
                          <span className={`badge ${transaction.type === 'Income' ? 'bg-success' : 'bg-primary'}`}>
                            {transaction.type}
                          </span>
                        </td>
                        <td>
                          <span className={`badge ${transaction.status === 'Completed' ? 'bg-success' : 'bg-warning'}`}>
                            {transaction.status}
                          </span>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="alert alert-info text-center my-4" role="alert">
                No transactions found for the selected period.
              </div>
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default ManaPaymentInfo;